#!/bin/bash
# maravento.com

# Unifi Hotspot Client Access via Linux Server with Iptables

# Diclaimer:
# This is an experimental script and depends on external components, such as dhcp, iptables, etc. Its operation is not guaranteed in Linux environments

# Tested with:
# - Vouchers generated by Hotspot on Unifi Network Server v.8.2.93
# - Ubuntu 22.04.x ​​x64 with iptables v1.8.7

# Howto
# https://www.maravento.com/2024/06/unifi-hotspot-con-iptables.html

# Easy Update Script for Installation on Ubuntu:
# https://get.glennr.nl/unifi/update/unifi-update.sh

echo "Unifi Hotspot Starting. Wait..."
printf "\n"

# check root
if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi

# check script execution
if pidof -x $(basename $0) >/dev/null; then
    for p in $(pidof -x $(basename $0)); do
        if [ "$p" -ne $$ ]; then
            echo "Script $0 is already running..."
            exit
        fi
    done
fi

# check SO
UBUNTU_VERSION=$(lsb_release -rs)
UBUNTU_ID=$(lsb_release -is | tr '[:upper:]' '[:lower:]')
if [[ "$UBUNTU_ID" != "ubuntu" || ( "$UBUNTU_VERSION" != "22.04" && "$UBUNTU_VERSION" != "24.04" ) ]]; then
    echo "Unsupported system. Use at your own risk"
    # exit 1
fi

# Allow List
MAC_LIST="/etc/acl/mac-hotspot.txt"
if [[ ! -f $MAC_LIST ]]; then
    mkdir -p "$(dirname "$MAC_LIST")"
    touch $MAC_LIST
    chmod 666 $MAC_LIST
fi &>/dev/null

# Block List
MAC_BLACKLIST="/etc/acl/bl-hotspot.txt"
if [[ ! -f $MAC_BLACKLIST ]]; then
    mkdir -p "$(dirname "$MAC_BLACKLIST")"
    touch $MAC_BLACKLIST
    chmod 666 $MAC_BLACKLIST
fi &>/dev/null

# LOG path
LOG_FILE="/var/log/hotspot.log"
if [[ ! -f $LOG_FILE ]]; then
    touch $LOG_FILE
    chmod 666 $LOG_FILE
fi &>/dev/null

## Defines variable for the LAN interface. To find out your network interfaces, run:
## ip -o link | awk '$2 != "lo:" {print $2, $(NF-2)}' | sed 's_: _ _'
wan=enp2s0
lan=enp2s1

# Linux Server IP
# replace the IP with that of your server
serverip=192.168.0.10

# IP and Range assignment to Hotspot Clients
# IMPORTANT: Must match CIDR range set in configuration on Unifi Hotspot
IP="192.168.0"
RANGE_INI=160
RANGE_END=200

# Timestamp
# Expiration time in seconds (example: 1 minute = 60 seconds, 1 hour = 3600 seconds, etc.)
# IMPORTANT: It must coincide with the time assigned in the vouchers in Unifi Hotspot
expiration_seconds=3600

# Local ports for authenticated client (Optional)
# Important about localports
# If you use Squid-Cache, you must add the proxy port (e.g. 3128)
# If you use DHCP Option 252 and a published .pac file, you must add the apache2/Nginx port of the .pac
# Edit this variable and remove or add the ports to authorize. By default:
# RFC 2131 DHCP BOOTP protocol (67,68), NETBios (137:139), Microsoft-DS and SMB (445), SNMP (162), Open cups (printing service) udp/tcp for lan users IPP (631), Proxy PAC Apache2 (8000), Squid-Cache (3128), DNS (53) DNS over TLS (853)
# WARNING: Add HTTPS (443) port, in case of transparent proxy or non-proxy
localports="67,68,137:139,445,162,631,8000,3128,53,853"

# check Rsyslog
function create_rsyslog_config() {
    local UNIFI_RSYSLOG="/etc/rsyslog.d/hotspot.conf"
    # Check if the rsyslog configuration file exists, if not, create it
    if [[ ! -f $UNIFI_RSYSLOG ]]; then
        echo "Creating rsyslog configuration if not exists..."
        touch $UNIFI_RSYSLOG
        echo ":msg, contains, \"HOTSPOT:\" /var/log/hotspot.log" >> $UNIFI_RSYSLOG
        echo "& stop" >> $UNIFI_RSYSLOG
        chmod 666 $UNIFI_RSYSLOG
        echo "rsyslog configuration created."
        systemctl restart rsyslog
        echo "rsyslog service restarted"
    else
        echo "rsyslog configuration already exists"
    fi
}
create_rsyslog_config

function unifi_rules() {
    # Variables
    # Open Unifi Ports
    # https://help.ui.com/hc/en-us/articles/218506997-UniFi-Network-Required-Ports-Reference
    # DNS (53), STUN (3478), Remote syslog (5514), device and application communication (80,8080), GUI/API (8443), HTTP/HTTPS portal redirection (8880, 8843), UniFi mobile speed test (6789), local-bound database communication (27117), AP-EDU broadcasting (5656:5699), Device discovery (10001), L2 network (1900), NTP (123)
    uports="53,3478,5514,8080,8443,8880,8843,6789,27117,5656:5699,10001,1900,123"
    
    echo "Configuring UniFi Hotspot ports"

    # Function to add or update a rule
    add_or_update_rule() {
        local table="$1"
        local rule="$2"
        if ! iptables -t "$table" -C $rule &>/dev/null; then
            iptables -t "$table" -I $rule &>/dev/null
        fi
    }

    # Configure rules for ports
    for protocol in tcp udp; do
        add_or_update_rule "filter" "INPUT -i $lan -d $serverip -p $protocol -m multiport --dports $uports -j ACCEPT"
        add_or_update_rule "filter" "FORWARD -i $lan -d $serverip -p $protocol -m multiport --dports $uports -j ACCEPT"
        add_or_update_rule "filter" "OUTPUT -p $protocol -m multiport --dports $uports -j ACCEPT"
    done
    
    echo "Configuring UniFi Hotspot String Capture"
    
    # Configure rules for POST and success strings
    for st in "success" "POST"; do
        add_or_update_rule "filter" "INPUT -i $lan -p tcp --dport 8880 -m string --string $st --algo bm -j LOG --log-prefix HOTSPOT:"
        add_or_update_rule "filter" "FORWARD -i $lan -p tcp --dport 8880 -m string --string $st --algo bm -j LOG --log-prefix HOTSPOT:"
    done
}
unifi_rules

# Remove hotspot iptables rules for whitelist
function del_ipt_hotspot () {
    for mac in $(awk -F";" '{print $2}' $MAC_LIST); do
    (
        for protocol in tcp udp; do
            iptables -D INPUT -i $lan -p $protocol -m multiport --dports $localports -m mac --mac-source "$mac" -j ACCEPT
            iptables -D FORWARD -i $lan -p $protocol -m multiport --dports $localports -o $wan -m mac --mac-source "$mac" -j ACCEPT
            iptables -D OUTPUT -p $protocol -m multiport --dports $localports -j ACCEPT
        done
    ) 2>/dev/null
    done
}
del_ipt_hotspot

# check Timestamp (MACs in mac-hotspot.txt and removing expired)
function check_timestamps() {
    local current_time=$(date +'%s')
    local macs_to_remove=()

    while IFS= read -r line; do
        local timestamp=$(echo "$line" | awk -F';' '{print $4}' | awk -F'_' '{print $2}')
        if (( current_time - timestamp > expiration_seconds )); then
            local mac=$(echo "$line" | awk -F';' '{print $2}')
            # Add MAC to remove list
            macs_to_remove+=("$line")
            echo "Removing expired MAC: $line"
            # restart DHCP
            systemctl restart isc-dhcp-server
            # restart DHCP if you use gateproxy project
            #/etc/scr/leases.sh
        fi
    done < "$MAC_LIST"

    # Remove expired MACs from MAC_LIST file
    for mac_entry in "${macs_to_remove[@]}"; do
        local mac=$(echo "$mac_entry" | awk -F";" '{print $2}')
        sed -i "\|$mac_entry|d" "$MAC_LIST"
    done
}
check_timestamps

# Generate random IP (within specified range)
function generate_random_ip() {
    echo "$IP.$((RANDOM % ($RANGE_END - $RANGE_INI + 1) + $RANGE_INI))"
}

# Generate random hostname (with Epoch Unix Timestamp)
function generate_random_hostname() {
    echo "host_$(date +'%s')"
}

# Add MAC with Timestamp to mac-hotspot.txt
function add_mac() {
    local mac="$1"
    local ip="$2"
    local hostname="$3"

    echo "a;$mac;$ip;$hostname" >> "$MAC_LIST"
    sort -u -o "$MAC_LIST" "$MAC_LIST"
}

# check MACs from Blocklist (is already registered)
function remove_mac_from_blocklist() {
    local mac="$1"
    if grep -q "$mac" "$MAC_BLACKLIST"; then
        # Remove the MAC from MAC_BLACKLIST
        sed -i "/$mac/d" "$MAC_BLACKLIST"
        echo "$mac has been removed from $MAC_BLACKLIST"
    else
        echo "$mac is not found in $MAC_BLACKLIST"
    fi
}

# check MACs from Allowlist (is already registered)
function remove_mac_from_allowlist() {
    local mac="$1"
    # If there are more lists to check
    #ANOTHER_MAC_LIST="$PATH_ACL/another_mac_list.txt"
    #if grep -q "$mac" "$MAC_LIST" || grep -q "$mac" "$ANOTHER_MAC_LIST"; then
    if grep -q "$mac" "$MAC_LIST"; then
        # Remove the MAC from $MAC_LIST
        sed -i "/$mac/d" "$MAC_LIST"
        echo "$mac has been removed from $MAC_LIST"
    else
        echo "$mac is not found in $MAC_LIST"
    fi
}

# Add MACs (after checking the lists)
function check_mac_and_add() {
    local mac="$1"
    remove_mac_from_blocklist "$mac"
    remove_mac_from_allowlist "$mac"
    if ! grep -q "$mac" "$MAC_LIST"; then
        add_mac "$mac" "$(generate_random_ip)" "$(generate_random_hostname)"
        echo "New hotspot client added: a;$mac;$(generate_random_ip);$(generate_random_hostname)"
    fi
}

# Capture LOG and extracting MACs
function process_logs() {
    if [[ -s "$LOG_FILE" ]]; then
        grep "HOTSPOT:" "$LOG_FILE" | while IFS= read -r line; do
            mac_address=$(echo "$line" | awk -F 'MAC=' '{print $2}' | awk -F ':' '{print $7":"$8":"$9":"$10":"$11":"$12}')
            echo "Processing LOG: $line"
            echo "MAC extracted: $mac_address"

            if [[ -n "$mac_address" ]]; then
                check_mac_and_add "$mac_address"
            fi
        done
        # Clean LOG
        truncate -s 0 "$LOG_FILE"
        # restart DHCP
        systemctl restart isc-dhcp-server
        # restart DHCP if you use gateproxy project
        #/etc/scr/leases.sh
    else
        echo "empty LOG. No new MACs to process"
    fi
}
process_logs

# Add hotspot iptables rules to whitelist
function add_ipt_hotspot() {
    for mac in $(awk -F";" '{print $2}' $MAC_LIST); do
    (
        for protocol in tcp udp; do
            iptables -I INPUT -i $lan -p $protocol -m multiport --dports $localports -m mac --mac-source "$mac" -j ACCEPT
            iptables -I FORWARD -i $lan -p $protocol -m multiport --dports $localports -o $wan -m mac --mac-source "$mac" -j ACCEPT
            iptables -I OUTPUT -p $protocol -m multiport --dports $localports -j ACCEPT
        done
    ) 2>/dev/null
    done
}
add_ipt_hotspot

